import{_ as s,o as a,c as n,R as l}from"./chunks/framework.JvFgJH8G.js";const C=JSON.parse('{"title":"着色器语言语法","description":"","frontmatter":{},"headers":[],"relativePath":"webgl/basic/4.md","filePath":"webgl/basic/4.md"}'),p={name:"webgl/basic/4.md"},o=l(`<h1 id="着色器语言语法" tabindex="-1">着色器语言语法 <a class="header-anchor" href="#着色器语言语法" aria-label="Permalink to &quot;着色器语言语法&quot;">​</a></h1><h2 id="_1-函数定义" tabindex="-1">1 函数定义 <a class="header-anchor" href="#_1-函数定义" aria-label="Permalink to &quot;1 函数定义&quot;">​</a></h2><h3 id="_1-1-函数结构" tabindex="-1">1.1 函数结构 <a class="header-anchor" href="#_1-1-函数结构" aria-label="Permalink to &quot;1.1 函数结构&quot;">​</a></h3><p>GLSL ES 的函数定义和C语法类似，基本构成包括返回类型、函数名、参数和函数体，具体结构如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">返回类型 </span><span style="color:#B392F0;">函数名</span><span style="color:#E1E4E8;"> (type0 arg0, type1 arg1,</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">, typen argn) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    函数体</span></span>
<span class="line"><span style="color:#E1E4E8;">    retrun 返回值；</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">返回类型 </span><span style="color:#6F42C1;">函数名</span><span style="color:#24292E;"> (type0 arg0, type1 arg1,</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">, typen argn) {</span></span>
<span class="line"><span style="color:#24292E;">    函数体</span></span>
<span class="line"><span style="color:#24292E;">    retrun 返回值；</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>函数如果没有返回值，函数体中就不需要<code>retrun</code>,这时候函数的返回值类型必须是<code>void</code>, 如果，函数的返回值是结构体类型，需要注意结构体的类型中不能有数组。 下面的例子是将RGBA颜色值转为亮度值的函数</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">float </span><span style="color:#B392F0;">getBrightness</span><span style="color:#E1E4E8;">( </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> vec3 color){</span></span>
<span class="line"><span style="color:#E1E4E8;">    retrun </span><span style="color:#79B8FF;">0.23</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">color.r </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.75</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">color.g </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">0.32</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">color.b</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">attribute vec3 a_Color</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    float brightness </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBrightness</span><span style="color:#E1E4E8;">(a_Color)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">float </span><span style="color:#6F42C1;">getBrightness</span><span style="color:#24292E;">( </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> vec3 color){</span></span>
<span class="line"><span style="color:#24292E;">    retrun </span><span style="color:#005CC5;">0.23</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">color.r </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.75</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">color.g </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">0.32</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">color.b</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">attribute vec3 a_Color</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    float brightness </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBrightness</span><span style="color:#24292E;">(a_Color)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>==注意，如果调用时传入的参数类型（a_Color）与声明函数是指定的参数类型（in vec3 color）不一致，就会报错==</p><h3 id="声明规范" tabindex="-1">声明规范 <a class="header-anchor" href="#声明规范" aria-label="Permalink to &quot;声明规范&quot;">​</a></h3><p>与C语言一样，如果函数定义在其调用之后，那么必须在进行调用前先声明该函数的规范，规范声明预先告诉WebGL系统函数的参数、参数类型、返回值等信息，具体请参数如下代码</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">float </span><span style="color:#B392F0;">luma</span><span style="color:#E1E4E8;">(vec3);</span><span style="color:#6A737D;">//规范声明</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">	float brightness </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">luma</span><span style="color:#E1E4E8;">(a_Color);</span><span style="color:#6A737D;">//将计算结果赋值给brightness</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">float </span><span style="color:#B392F0;">luma</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> vec3 color)  {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.231</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> color.r </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.752</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> color.g </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.032</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> color.b</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">float </span><span style="color:#6F42C1;">luma</span><span style="color:#24292E;">(vec3);</span><span style="color:#6A737D;">//规范声明</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">	float brightness </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">luma</span><span style="color:#24292E;">(a_Color);</span><span style="color:#6A737D;">//将计算结果赋值给brightness</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">float </span><span style="color:#6F42C1;">luma</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> vec3 color)  {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.231</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> color.r </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.752</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> color.g </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.032</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> color.b</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_2-流程控制" tabindex="-1">2. 流程控制 <a class="header-anchor" href="#_2-流程控制" aria-label="Permalink to &quot;2. 流程控制&quot;">​</a></h2><p>着色器中的流程控制与C和JavaScript语言中的流程控制几乎无异，主要是通过<strong>if语句</strong>和<strong>for语句</strong>等控制流程</p><h3 id="_2-1-if语句" tabindex="-1">2.1 if语句 <a class="header-anchor" href="#_2-1-if语句" aria-label="Permalink to &quot;2.1 if语句&quot;">​</a></h3><p>if语句有三种控制流程的语句模型，分别是** if **模型、 <strong>if…else…</strong> 模型 和 <strong>if…else if…else</strong> 模型</p><p><strong>if</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(x</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">  gl_FragColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//红色</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(x</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  gl_FragColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//红色</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>if...else</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(distance </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.4</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">  gl_FragColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//红色</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  gl_FragColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//蓝色</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(distance </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.4</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  gl_FragColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//红色</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  gl_FragColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//蓝色</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>if ... else if... else</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(distance </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">	gl_FragColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//红色</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (distance </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	gl_FragColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//蓝色</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (distance </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.4</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	gl_FragColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//绿色</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	gl_FragColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec4</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//黑色</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(distance </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">	gl_FragColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//红色</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (distance </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	gl_FragColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//蓝色</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (distance </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.4</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	gl_FragColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//绿色</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	gl_FragColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec4</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//黑色</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>GLSL ES中没有switch语句，在程序中避免过多的使用if语句，否则会影响效率</p><h3 id="_2-2-for-语句" tabindex="-1">2.2 for 语句 <a class="header-anchor" href="#_2-2-for-语句" aria-label="Permalink to &quot;2.2 for 语句&quot;">​</a></h3><p>大多数循环程序都是通过for语句实现的，GLSL ES 语言也一样，for 语句的格式如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (初始化表达式;条件表达式;循环步进表达式){</span></span>
<span class="line"><span style="color:#E1E4E8;">	重复执行的语句;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (初始化表达式;条件表达式;循环步进表达式){</span></span>
<span class="line"><span style="color:#24292E;">	重复执行的语句;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>GLSL ES 语言的for循环的循环变量有一些特殊的限制，具体如下</p><ul><li>一个for循环中只允许有一个循环变量，且只能是int类型或float类型</li><li>循环步进表达式必须是以下的形式中的一种，i++,i–,i+=常量表达式，i-=常量表达式</li><li>条件表达式必须是循环变量与整形常量的比较</li><li>循环体内，循环变量不可以被赋值</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(int i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">	sum </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(int i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">	sum </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_2-3-continue、break语句" tabindex="-1">2.3 continue、break语句 <a class="header-anchor" href="#_2-3-continue、break语句" aria-label="Permalink to &quot;2.3 continue、break语句&quot;">​</a></h3><p>通常情况下，我们会在for语句中使用continue语句来跳过本次循环，使用break语句终止循环</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(i</span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">//跳过循环体余下的部分，直接进入下次循环</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//当i==15时，这部分代码不会执行</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(i</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">15</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//跳过循环体余下的部分，直接进入下次循环</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//当i==15时，这部分代码不会执行</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(i</span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">//直接终止循环执行，跳出for循环</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(i</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">18</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//直接终止循环执行，跳出for循环</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_2-4-discard-语句" tabindex="-1">2.4 discard 语句 <a class="header-anchor" href="#_2-4-discard-语句" aria-label="Permalink to &quot;2.4 discard 语句&quot;">​</a></h3><p>与其他语言不一样的是，GLSL ES语言 提供了discard语句。discard语句只能在片元着色器中使用，表示放弃当前片元直接处理下一个片元，作用与continue类似。请参照以下代码</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//片元着色器</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">FSHADER_SOURCE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;#ifdef GL_ES</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39; precision mediump float;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 设置float类型默认精度</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;#endif</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;varying vec4 v_Color;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//声明varying变量v_Color，用来接收顶点着色器传送的片元颜色信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;void main(){</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;  float d = distance(gl_PointCoord, vec2(0.5, 0.5));</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//计算像素距离中心点的距离</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;  if(d &lt; 0.5) {</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//距离大于0.5放弃片元，小于0.5保留片元</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;  } else { discard; }</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//跳过当前片元直接处理下一个片元</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//片元着色器</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">FSHADER_SOURCE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;#ifdef GL_ES</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39; precision mediump float;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 设置float类型默认精度</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;#endif</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;varying vec4 v_Color;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//声明varying变量v_Color，用来接收顶点着色器传送的片元颜色信息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;void main(){</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;  float d = distance(gl_PointCoord, vec2(0.5, 0.5));</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//计算像素距离中心点的距离</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;  if(d &lt; 0.5) {</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//距离大于0.5放弃片元，小于0.5保留片元</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;  } else { discard; }</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//跳过当前片元直接处理下一个片元</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span></span></code></pre></div>`,35),e=[o];function c(t,r,E,y,i,F){return a(),n("div",null,e)}const g=s(p,[["render",c]]);export{C as __pageData,g as default};
