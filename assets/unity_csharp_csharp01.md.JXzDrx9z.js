import{_ as s,o as a,c as n,R as l}from"./chunks/framework.JvFgJH8G.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"unity/csharp/csharp01.md","filePath":"unity/csharp/csharp01.md"}'),t={name:"unity/csharp/csharp01.md"},e=l(`<h2 id="c-概述" tabindex="-1">C#概述 <a class="header-anchor" href="#c-概述" aria-label="Permalink to &quot;C#概述&quot;">​</a></h2><h3 id="一、概述" tabindex="-1">一、概述 <a class="header-anchor" href="#一、概述" aria-label="Permalink to &quot;一、概述&quot;">​</a></h3><p>C#（读作“C sharp”）是一种新式编程语言，不仅面向对象还类型安全。开发人员利用C#可以生成在.NET中运行的多种安全可靠的应用程序。C#源于C语言系列，C、C++、Java和Javas开发人员可以很快的上手使用。</p><p>C#是面向对象的，面向组件的开发语言，C#提供了语言构造来直接支持这些概念,让C#成为一种非常自然的语言、可以用于创建和使用软件组件、自诞生之日起，C#就添加了支持新工作负载和新兴软件设计实践功能，C#本质上是面向对象的语言，你需要定义类型及其行为。</p><h3 id="net体系结构" tabindex="-1">.NET体系结构 <a class="header-anchor" href="#net体系结构" aria-label="Permalink to &quot;.NET体系结构&quot;">​</a></h3><p>C#运行在.NET上，而.NET是名为公共语言运行时（CLR）的虚拟执行系统和一组类库，CLR是微软对公共语言基础结构（CLI）国际标准的实现。CLI是创建执行和开发环境的基础、语言和库可以在其中无缝地协同工作。</p><p>用C#编写的源代码被编译成符合CLI规范的中间语言（IL），IL代码和资源（如位图和字符串）存储在扩展名位.dll的程序集中，程序集包含了一个介绍程序集类型、版本和区域性的清单。</p><p>执行C#程序时，程序集将加载到CLR，CLR会直接执行（JIT）编译，将IL代码转换成本机指令，CLR可提供其他与自动垃圾回收、异常处理和资源管理相关的服务。CLR执行的代码有时称为“托管代码“。而”非托管代码“被编译成面向特定平台的本机语言。</p><p>语言互操作性是.NET的一项重要功能。C#编译器生成的IL代码符合公共类型规范（CTS）。通过C#生成的IL代码可以与通过.NET版本的F#、Visual Basic\\C++生成的代码进行交互。还有20多种与CTS兼容的语言。单个程序集可包含多个用不同.net语言编写的模块。这些类型可以互相引用，就像他们是用同一种语言编写的一样。</p><p>除了运行时服务之外，.NET还包含大量库。这些库支持多种不同的工作负载，他们已经整理到命名空间中，这些命名空间提供各种实用功能，这些功能包括文件输入输出、字符串控制、XML分析、web应用程序框架和window窗体控件。典型的C#应用程序广泛使用.net类库处理常见的”管道“零碎工作。</p><h3 id="net-框架-net-framework" tabindex="-1">.NET 框架（.NET Framework） <a class="header-anchor" href="#net-框架-net-framework" aria-label="Permalink to &quot;.NET 框架（.NET Framework）&quot;">​</a></h3><p>.net 框架是一个创新的平台，能帮助编写出来一下类型的应用程序：</p><ul><li>window应用程序</li><li>web应用程序</li><li>web服务</li></ul><p>.net 框架应用程序时多平台应用。框架的设计方式使得它适用于下列的各种语言：C#、C++、VB等等。所有的这些语言都可以访问框架，彼此之间也可以相互交互。.net框架由一个巨大的代码库组成，用于C#等客户端语言。下面时一些.net 框架的组件：</p><ul><li>公共语言运行库（CLR）</li><li>.Net框架类库</li><li>公共语言规范</li><li>通用类型系统</li><li>元数据和组件</li><li>window窗体</li><li>ASP.Net</li><li>ADO.Net</li><li>等等</li></ul><h3 id="c-程序结构" tabindex="-1">C#程序结构 <a class="header-anchor" href="#c-程序结构" aria-label="Permalink to &quot;C#程序结构&quot;">​</a></h3><p>一个C#程序主要包括以下部分：</p><ul><li>命名空间声明（Namespace declaration）</li><li>一个class</li><li>class方法</li><li>calss 属性</li><li>一个Main方法</li><li>语句（statement）和表达式（Expression）</li><li>注释</li></ul><p>以“Hellow World” 为例：</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">System</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HelloWorldApplication</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    calss HelloWorld{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> void Main(string[] args){</span></span>
<span class="line"><span style="color:#6A737D;">            // 我的第一个程序</span></span>
<span class="line"><span style="color:#E1E4E8;">            Console.WriteLine(&quot;Hello World&quot;);</span></span>
<span class="line"><span style="color:#E1E4E8;">            Console.ReadKey();</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">System</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloWorldApplication</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    calss HelloWorld{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> void Main(string[] args){</span></span>
<span class="line"><span style="color:#6A737D;">            // 我的第一个程序</span></span>
<span class="line"><span style="color:#24292E;">            Console.WriteLine(&quot;Hello World&quot;);</span></span>
<span class="line"><span style="color:#24292E;">            Console.ReadKey();</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>程序拆解：</p><ul><li>第一行using System：using 关键字用于引用在程序中包含System命名空间。一个程序有多个System</li><li>第二行namespace：声明了一个HelloWorldApplication的命名空间，一个命名空间下包含一系列的类</li><li>第三行class ：声明一个HellowWorld类，类一般包含多个方法，方法定义了类的行为。</li><li>第四行 static viod ：声明了一个静态、无返回值的Main 方法，Main方法是所有C#程序的入口点。</li><li>第五行：程序语句，Console是在System命名空间下的一个类，WriteLine是Console类下面的一个方法</li></ul><h3 id="c-语言特点" tabindex="-1">C#语言特点 <a class="header-anchor" href="#c-语言特点" aria-label="Permalink to &quot;C#语言特点&quot;">​</a></h3><ul><li>C#大小写敏感</li><li>所有的语句和表达式必须以分号（；）结尾</li><li>程序的执行从Main开始</li><li>与Java不同的是，C#的文件名称和类的名称可以不相同（Java的类和文件名不同则无法通过编译）</li></ul><h3 id="二、初识c" tabindex="-1">二、初识C# <a class="header-anchor" href="#二、初识c" aria-label="Permalink to &quot;二、初识C#&quot;">​</a></h3><h3 id="c-类结构解读" tabindex="-1">C#类结构解读 <a class="header-anchor" href="#c-类结构解读" aria-label="Permalink to &quot;C#类结构解读&quot;">​</a></h3><p>C#程序由一个或者多个文件组成，每个文件均包含零个或者多个命名空间，一个命名空间包含类、结构、接口、枚举、委托、等类型或其他命名空间，下面是包含这些元素的C#程序主干，在C#9之前入口是<code>Main</code>静态方法。</p><div class="language-C# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">System</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">YourNamespace</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">	// 类</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">YourClass</span></span>
<span class="line"><span style="color:#E1E4E8;">	{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#6A737D;">    // 结构</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">YourStruct</span></span>
<span class="line"><span style="color:#E1E4E8;">	{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#6A737D;">    // 接口</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IYourInterface</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 委托</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">delegate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">YourDelegate</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">    // 枚举</span></span>
<span class="line"><span style="color:#E1E4E8;">    enum YourEnum</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 其他命名空间</span></span>
<span class="line"><span style="color:#E1E4E8;">    namespace OtherNamespace</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    class Program</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#6A737D;">        // 静态main方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        static void Main(</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">args</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Console.WriteLine(&#39;</span><span style="color:#F97583;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">program</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">starts</span><span style="color:#E1E4E8;"> here&#39;)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">System</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">YourNamespace</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">	// 类</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">YourClass</span></span>
<span class="line"><span style="color:#24292E;">	{</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#6A737D;">    // 结构</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">YourStruct</span></span>
<span class="line"><span style="color:#24292E;">	{</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#6A737D;">    // 接口</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IYourInterface</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 委托</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">delegate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">YourDelegate</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">    // 枚举</span></span>
<span class="line"><span style="color:#24292E;">    enum YourEnum</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 其他命名空间</span></span>
<span class="line"><span style="color:#24292E;">    namespace OtherNamespace</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    class Program</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#6A737D;">        // 静态main方法</span></span>
<span class="line"><span style="color:#24292E;">        static void Main(</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">args</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            Console.WriteLine(&#39;</span><span style="color:#D73A49;">this</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">program</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">starts</span><span style="color:#24292E;"> here&#39;)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>C#9之后加入了顶级语法的写法：</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">System</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// your program starts here</span></span>
<span class="line"><span style="color:#E1E4E8;">Console.</span><span style="color:#B392F0;">WriteLine</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;your program starts here&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">YourNamespace</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">	// 类</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">YourClass</span></span>
<span class="line"><span style="color:#E1E4E8;">	{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#6A737D;">    // 结构</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">YourStruct</span></span>
<span class="line"><span style="color:#E1E4E8;">	{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#6A737D;">    // 接口</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IYourInterface</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 委托</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">delegate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">YourDelegate</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">    // 枚举</span></span>
<span class="line"><span style="color:#E1E4E8;">    enum YourEnum</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 其他命名空间</span></span>
<span class="line"><span style="color:#E1E4E8;">    namespace OtherNamespace</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">System</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// your program starts here</span></span>
<span class="line"><span style="color:#24292E;">Console.</span><span style="color:#6F42C1;">WriteLine</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;your program starts here&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">YourNamespace</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">	// 类</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">YourClass</span></span>
<span class="line"><span style="color:#24292E;">	{</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#6A737D;">    // 结构</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">YourStruct</span></span>
<span class="line"><span style="color:#24292E;">	{</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#6A737D;">    // 接口</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IYourInterface</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 委托</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">delegate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">YourDelegate</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">    // 枚举</span></span>
<span class="line"><span style="color:#24292E;">    enum YourEnum</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 其他命名空间</span></span>
<span class="line"><span style="color:#24292E;">    namespace OtherNamespace</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="c-基本语法" tabindex="-1">C#基本语法 <a class="header-anchor" href="#c-基本语法" aria-label="Permalink to &quot;C#基本语法&quot;">​</a></h3><p>C#是面向对象的编程语言，在面向对象的程序设计中程序由各种互相交互的对象组成，相同种类的对象通常具有相同的类型，或者说，是在相同的calss中。</p><p>以Rectangle 为例，它具有length 和width属性，根据设计需要接受这些属性来计算面积或者其他值：</p><h4 id="语句" tabindex="-1">语句 <a class="header-anchor" href="#语句" aria-label="Permalink to &quot;语句&quot;">​</a></h4><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建一个矩形对象</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">System</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RectangleAPP</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">    // 创建一个矩形类</span></span>
<span class="line"><span style="color:#E1E4E8;">    calss Rectangle{</span></span>
<span class="line"><span style="color:#6A737D;">        // 成员变量</span></span>
<span class="line"><span style="color:#E1E4E8;">        double lenght;</span></span>
<span class="line"><span style="color:#E1E4E8;">        double width;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> void AcceptDetail(){</span></span>
<span class="line"><span style="color:#E1E4E8;">            length = 4.5;</span></span>
<span class="line"><span style="color:#E1E4E8;">            width = 3.5; </span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CalcArea</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> length </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> width;</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Display</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">            Console.</span><span style="color:#B392F0;">WriteLine</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Length: {0}&quot;</span><span style="color:#E1E4E8;">, length)</span></span>
<span class="line"><span style="color:#E1E4E8;">                 Console.</span><span style="color:#B392F0;">WriteLine</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Width: {0}&quot;</span><span style="color:#E1E4E8;">, width)</span></span>
<span class="line"><span style="color:#E1E4E8;">                 Console.</span><span style="color:#B392F0;">WriteLine</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Area: {0}&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">CalcArea</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExecuteRec</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">        // 入口函数</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Main</span><span style="color:#E1E4E8;"> (string[],args){</span></span>
<span class="line"><span style="color:#6A737D;">            // </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">Rectangle</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Rectangle</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            r.</span><span style="color:#B392F0;">AcceptDetail</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            r.</span><span style="color:#B392F0;">Displau</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            Console.</span><span style="color:#B392F0;">ReadLine</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个矩形对象</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">System</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RectangleAPP</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">    // 创建一个矩形类</span></span>
<span class="line"><span style="color:#24292E;">    calss Rectangle{</span></span>
<span class="line"><span style="color:#6A737D;">        // 成员变量</span></span>
<span class="line"><span style="color:#24292E;">        double lenght;</span></span>
<span class="line"><span style="color:#24292E;">        double width;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> void AcceptDetail(){</span></span>
<span class="line"><span style="color:#24292E;">            length = 4.5;</span></span>
<span class="line"><span style="color:#24292E;">            width = 3.5; </span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CalcArea</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> length </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> width;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Display</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">            Console.</span><span style="color:#6F42C1;">WriteLine</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Length: {0}&quot;</span><span style="color:#24292E;">, length)</span></span>
<span class="line"><span style="color:#24292E;">                 Console.</span><span style="color:#6F42C1;">WriteLine</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Width: {0}&quot;</span><span style="color:#24292E;">, width)</span></span>
<span class="line"><span style="color:#24292E;">                 Console.</span><span style="color:#6F42C1;">WriteLine</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Area: {0}&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">CalcArea</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExecuteRec</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">        // 入口函数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Main</span><span style="color:#24292E;"> (string[],args){</span></span>
<span class="line"><span style="color:#6A737D;">            // </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">Rectangle</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">r</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Rectangle</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            r.</span><span style="color:#6F42C1;">AcceptDetail</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            r.</span><span style="color:#6F42C1;">Displau</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            Console.</span><span style="color:#6F42C1;">ReadLine</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="c-中的注释" tabindex="-1">C#中的注释 <a class="header-anchor" href="#c-中的注释" aria-label="Permalink to &quot;C#中的注释&quot;">​</a></h4><ul><li>单行注释</li></ul><div class="language-C# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 这是单行注释</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 这是单行注释</span></span></code></pre></div><ul><li>多行注释</li></ul><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">	这是多行注释</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">	这是多行注释</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><ul><li>文本注释</li></ul><div class="language-C# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">///&lt;</span><span style="color:#85E89D;">summary</span><span style="color:#6A737D;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">///&lt;</span><span style="color:#85E89D;">summary</span><span style="color:#6A737D;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">///&lt;</span><span style="color:#22863A;">summary</span><span style="color:#6A737D;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">///&lt;</span><span style="color:#22863A;">summary</span><span style="color:#6A737D;">&gt;</span></span></code></pre></div><h4 id="关键字" tabindex="-1">关键字 <a class="header-anchor" href="#关键字" aria-label="Permalink to &quot;关键字&quot;">​</a></h4><p>关键字是 C# 编译器预定义的保留字。这些关键字不能用作标识符，但是，如果您想使用这些关键字作为标识符，可以在关键字前面加上 **@ **字符作为前缀。</p><p>在 C# 中，有些标识符在代码的上下文中有特殊的意义，如 <strong>get</strong> 和 <strong>set</strong>，这些被称为上下文关键字（contextual keywords）。</p><p>下表列出了 C# 中的保留关键字（Reserved Keywords）和上下文关键字（Contextual Keywords）：</p><table><thead><tr><th><strong>保留关键字</strong></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>abstract</td><td>as</td><td>base</td><td>bool</td><td>break</td><td>byte</td><td>case</td></tr><tr><td>catch</td><td>char</td><td>checked</td><td>class</td><td>const</td><td>continue</td><td>decimal</td></tr><tr><td>default</td><td>delegate</td><td>do</td><td>double</td><td>else</td><td>enum</td><td>event</td></tr><tr><td>explicit</td><td>extern</td><td>false</td><td>finally</td><td>fixed</td><td>float</td><td>for</td></tr><tr><td>foreach</td><td>goto</td><td>if</td><td>implicit</td><td>in</td><td>in (generic modifier)</td><td>int</td></tr><tr><td>interface</td><td>internal</td><td>is</td><td>lock</td><td>long</td><td>namespace</td><td>new</td></tr><tr><td>null</td><td>object</td><td>operator</td><td>out</td><td>out (generic modifier)</td><td>override</td><td>params</td></tr><tr><td>private</td><td>protected</td><td>public</td><td>readonly</td><td>ref</td><td>return</td><td>sbyte</td></tr><tr><td>sealed</td><td>short</td><td>sizeof</td><td>stackalloc</td><td>static</td><td>string</td><td>struct</td></tr><tr><td>switch</td><td>this</td><td>throw</td><td>true</td><td>try</td><td>typeof</td><td>uint</td></tr><tr><td>ulong</td><td>unchecked</td><td>unsafe</td><td>ushort</td><td>using</td><td>virtual</td><td>void</td></tr><tr><td>volatile</td><td>while</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>上下文关键字</strong></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>add</td><td>alias</td><td>ascending</td><td>descending</td><td>dynamic</td><td>from</td><td>get</td></tr><tr><td>global</td><td>group</td><td>into</td><td>join</td><td>let</td><td>orderby</td><td>partial (type)</td></tr><tr><td>partial (method)</td><td>remove</td><td>select</td><td>set</td><td></td><td></td><td></td></tr></tbody></table><h4 id="标识符" tabindex="-1">标识符 <a class="header-anchor" href="#标识符" aria-label="Permalink to &quot;标识符&quot;">​</a></h4><p>标识符是用来识别类、变量、函数或任何其它用户定义的项目。在 C# 中，类的命名必须遵循如下基本规则：</p><ul><li><strong>标识符必须以字母开头，后面可以跟一系列的字母、数字（ 0 - 9 ）或下划线（ _ ）。标识符中的第一个字符不能是数字。</strong></li><li><strong>标识符必须不包含任何嵌入的空格或符号，比如 ? - +! @ # % ^ &amp; * ( ) [ ] { } . ; : &quot; &#39; / \\。但是，可以使用下划线（ _ ）。</strong></li><li><strong>标识符不能是 C# 关键字。</strong></li></ul><h4 id="成员变量" tabindex="-1">成员变量 <a class="header-anchor" href="#成员变量" aria-label="Permalink to &quot;成员变量&quot;">​</a></h4><p>变量是类的属性或数据成员，用于存储数据。在上面的程序中，<strong>Rectangle</strong> 类有两个成员变量，名为 <strong>length</strong> 和 <strong>width</strong>。</p><h4 id="成员函数" tabindex="-1">成员函数 <a class="header-anchor" href="#成员函数" aria-label="Permalink to &quot;成员函数&quot;">​</a></h4><p>函数是一系列执行指定任务的语句。类的成员函数是在类内声明的。我们举例的类 <strong>Rectangle</strong> 包含了三个成员函数： <code>AcceptDetails</code>、<code>CalcArea </code>和 <code>Display</code>。</p><h4 id="类的实例化" tabindex="-1">类的实例化 <a class="header-anchor" href="#类的实例化" aria-label="Permalink to &quot;类的实例化&quot;">​</a></h4><p>在上面的程序中，类 <strong>ExecuteRectangle</strong> 是一个包含 <code>Main() </code> 方法和实例化 <strong>Rectangle</strong> 类的类。</p><p><strong>C# 类的实例化</strong>：通过已有的类（class）创建出该类的一个对象（object），这一过程就叫做类的实例化。</p><p>**举个例子：**你设计了一个汽车模型，交给工人师傅去加工制作，生产出一辆（一批）汽车。汽车模型就相当于程序中的类，生产出来的汽车就是对象，生产汽车这一过程就叫做类的实例化。</p><h3 id="c-数据类型" tabindex="-1">C#数据类型 <a class="header-anchor" href="#c-数据类型" aria-label="Permalink to &quot;C#数据类型&quot;">​</a></h3><p>在 C# 中，变量分为以下几种类型：</p><ul><li>值类型（Value types）</li><li>引用类型（Reference types）</li><li>指针类型（Pointer types）</li></ul><h4 id="值类型-value-types" tabindex="-1">值类型（Value types） <a class="header-anchor" href="#值类型-value-types" aria-label="Permalink to &quot;值类型（Value types）&quot;">​</a></h4><p>值类型变量可以直接分配给一个值。它们是从类 <strong>System.ValueType</strong> 中派生的。</p><p>值类型直接包含数据。比如 <strong>int、char、float</strong>，它们分别存储数字、字母、浮点数。当您声明一个 <strong>int</strong> 类型时，系统分配内存来存储值。</p><p>下表列出了 C# 2010 中可用的值类型：</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th><th style="text-align:left;">范围</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">bool</td><td style="text-align:left;">布尔值</td><td style="text-align:left;">True 或 False</td><td style="text-align:left;">False</td></tr><tr><td style="text-align:left;">byte</td><td style="text-align:left;">8 位无符号整数</td><td style="text-align:left;">0 到 255</td><td style="text-align:left;">0</td></tr><tr><td style="text-align:left;">char</td><td style="text-align:left;">16 位 Unicode 字符</td><td style="text-align:left;">U +0000 到 U +ffff</td><td style="text-align:left;">&#39;&#39;</td></tr><tr><td style="text-align:left;">decimal</td><td style="text-align:left;">128 位精确的十进制值，28-29 有效位数</td><td style="text-align:left;">(-7.9 x 1028 到 7.9 x 1028) / 100 到 28</td><td style="text-align:left;">0.0M</td></tr><tr><td style="text-align:left;">double</td><td style="text-align:left;">64 位双精度浮点型</td><td style="text-align:left;">(+/-)5.0 x 10-324 到 (+/-)1.7 x 10308</td><td style="text-align:left;">0.0D</td></tr><tr><td style="text-align:left;">float</td><td style="text-align:left;">32 位单精度浮点型</td><td style="text-align:left;">-3.4 x 1038 到 + 3.4 x 1038</td><td style="text-align:left;">0.0F</td></tr><tr><td style="text-align:left;">int</td><td style="text-align:left;">32 位有符号整数类型</td><td style="text-align:left;">-2,147,483,648 到 2,147,483,647</td><td style="text-align:left;">0</td></tr><tr><td style="text-align:left;">long</td><td style="text-align:left;">64 位有符号整数类型</td><td style="text-align:left;">-923,372,036,854,775,808 到 9,223,372,036,854,775,807</td><td style="text-align:left;">0L</td></tr><tr><td style="text-align:left;">sbyte</td><td style="text-align:left;">8 位有符号整数类型</td><td style="text-align:left;">-128 到 127</td><td style="text-align:left;">0</td></tr><tr><td style="text-align:left;">short</td><td style="text-align:left;">16 位有符号整数类型</td><td style="text-align:left;">-32,768 到 32,767</td><td style="text-align:left;">0</td></tr><tr><td style="text-align:left;">uint</td><td style="text-align:left;">32 位无符号整数类型</td><td style="text-align:left;">0 到 4,294,967,295</td><td style="text-align:left;">0</td></tr><tr><td style="text-align:left;">ulong</td><td style="text-align:left;">64 位无符号整数类型</td><td style="text-align:left;">0 到 18,446,744,073,709,551,615</td><td style="text-align:left;">0</td></tr><tr><td style="text-align:left;">ushort</td><td style="text-align:left;">16 位无符号整数类型</td><td style="text-align:left;">0 到 65,535</td><td style="text-align:left;">0</td></tr></tbody></table><h4 id="引用类型-reference-types" tabindex="-1">引用类型（Reference types） <a class="header-anchor" href="#引用类型-reference-types" aria-label="Permalink to &quot;引用类型（Reference types）&quot;">​</a></h4><p>引用类型不包含存储在变量中的实际数据，但它们包含对变量的引用。</p><p>换句话说，它们指的是一个内存位置。使用多个变量时，引用类型可以指向一个内存位置。如果内存位置的数据是由一个变量改变的，其他变量会自动反映这种值的变化。<strong>内置的</strong> 引用类型有：<strong>object</strong>、<strong>dynamic</strong> 和 <strong>string</strong>。</p><h4 id="对象-object-类型" tabindex="-1">对象（Object）类型 <a class="header-anchor" href="#对象-object-类型" aria-label="Permalink to &quot;对象（Object）类型&quot;">​</a></h4><p><strong>对象（Object）类型</strong> 是 C# 通用类型系统（Common Type System - CTS）中所有数据类型的终极基类。Object 是 <strong>System.Object</strong> 类的别名。所以对象（Object）类型可以被分配任何其他类型（值类型、引用类型、预定义类型或用户自定义类型）的值。但是，在分配值之前，需要先进行类型转换。</p><p>当一个值类型转换为对象类型时，则被称为 <strong>装箱</strong>；另一方面，当一个对象类型转换为值类型时，则被称为 <strong>拆箱</strong>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">object obj;</span></span>
<span class="line"><span style="color:#e1e4e8;">obj = 100; // 这是装箱</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">object obj;</span></span>
<span class="line"><span style="color:#24292e;">obj = 100; // 这是装箱</span></span></code></pre></div><h4 id="知识点补充-关于装箱和拆箱" tabindex="-1">知识点补充：关于装箱和拆箱 <a class="header-anchor" href="#知识点补充-关于装箱和拆箱" aria-label="Permalink to &quot;知识点补充：关于装箱和拆箱&quot;">​</a></h4><p>装箱：值类型转换为对象类型，示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">int val = 8;</span></span>
<span class="line"><span style="color:#e1e4e8;">object obj = val;//整型数据转换为了对象类型（装箱）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">int val = 8;</span></span>
<span class="line"><span style="color:#24292e;">object obj = val;//整型数据转换为了对象类型（装箱）</span></span></code></pre></div><p>拆箱：之前由值类型转换而来的对象类型再转回值类型，例子：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">int val = 8;</span></span>
<span class="line"><span style="color:#e1e4e8;">object obj = val;//先装箱</span></span>
<span class="line"><span style="color:#e1e4e8;">int nval = （int）obj;//再拆箱</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">int val = 8;</span></span>
<span class="line"><span style="color:#24292e;">object obj = val;//先装箱</span></span>
<span class="line"><span style="color:#24292e;">int nval = （int）obj;//再拆箱</span></span></code></pre></div><p>注意：只有装过箱的数据才能拆箱。</p><h4 id="动态-dynamic-类型" tabindex="-1">动态（Dynamic）类型 <a class="header-anchor" href="#动态-dynamic-类型" aria-label="Permalink to &quot;动态（Dynamic）类型&quot;">​</a></h4><p>您可以存储任何类型的值在动态数据类型变量中。这些变量的类型检查是在运行时发生的。</p><p>声明动态类型的语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">dynamic &lt;variable_name&gt; = value;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">dynamic &lt;variable_name&gt; = value;</span></span></code></pre></div><p>例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">dynamic d = 20;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">dynamic d = 20;</span></span></code></pre></div><p>动态类型与对象类型相似，但是对象类型变量的类型检查是在编译时发生的，而动态类型变量的类型检查是在运行时发生的。</p><h4 id="字符串-string-类型" tabindex="-1">字符串（String）类型 <a class="header-anchor" href="#字符串-string-类型" aria-label="Permalink to &quot;字符串（String）类型&quot;">​</a></h4><p><strong>字符串（String）类型</strong> 允许您给变量分配任何字符串值。字符串（String）类型是 System.String 类的别名。它是从对象（Object）类型派生的。字符串（String）类型的值可以通过两种形式进行分配：引号和 @引号。</p><p>例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">String str = &quot;w3cschool.cn&quot;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">String str = &quot;w3cschool.cn&quot;;</span></span></code></pre></div><p>一个 @引号字符串：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">@&quot;w3cschool.cn&quot;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">@&quot;w3cschool.cn&quot;;</span></span></code></pre></div><p>C# string 字符串的前面可以加 @（称作&quot;逐字字符串&quot;）将转义字符（\\）当作普通字符对待，比如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">string str = @&quot;C:\\Windows&quot;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">string str = @&quot;C:\\Windows&quot;;</span></span></code></pre></div><p>等价于：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">string str = &quot;C:\\\\Windows&quot;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">string str = &quot;C:\\\\Windows&quot;;</span></span></code></pre></div><p>@ 字符串中可以任意换行，换行符及缩进空格都计算在字符串长度之内。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">string str = @&quot;&lt;script type=&quot;&quot;text/javascript&quot;&quot;&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;!--     --&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;/script&gt;&quot;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">string str = @&quot;&lt;script type=&quot;&quot;text/javascript&quot;&quot;&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;!--     --&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;/script&gt;&quot;;</span></span></code></pre></div><p>用户自定义引用类型有：<strong>class</strong>、<strong>interface</strong> 或 <strong>delegate</strong>。我们将在以后的章节中讨论这些类型。</p><h4 id="指针类型-pointer-types" tabindex="-1">指针类型（Pointer types） <a class="header-anchor" href="#指针类型-pointer-types" aria-label="Permalink to &quot;指针类型（Pointer types）&quot;">​</a></h4><p>指针类型变量存储另一种类型的内存地址。C# 中的指针与 C 或 C++ 中的指针有相同的功能。</p><p>声明指针类型的语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">type* identifier;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">type* identifier;</span></span></code></pre></div><p>例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">char* cptr;</span></span>
<span class="line"><span style="color:#e1e4e8;">int* iptr;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">char* cptr;</span></span>
<span class="line"><span style="color:#24292e;">int* iptr;</span></span></code></pre></div><p>我们将在章节&quot;<a href="https://www.w3cschool.cn/csharp/csharp-unsafe-codes.html" target="_blank" rel="noreferrer">不安全的代码</a>&quot;中讨论指针类型。</p><h3 id="c-类型转换" tabindex="-1">C#类型转换 <a class="header-anchor" href="#c-类型转换" aria-label="Permalink to &quot;C#类型转换&quot;">​</a></h3><p>类型转换从根本上说是类型铸造，或者说是吧数据从一种类型转换为另一种类型。在C#中类型转换有两种形式:</p><ul><li><strong>隐式类型转换</strong>-是C#默认的以安全方式进行转换，例如，从小的整型（<strong>int</strong>）转换为大的整型（<strong>long</strong>），从派生类转换为基类。</li><li><strong>显式类型转换</strong>-这些转换是通过用户使用预先定义好的函数显式完成，需要强制转换运算符。</li></ul><p>C# 提供了下列内置的类型转换方法：</p><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">方法 &amp; 描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;"><strong>ToBoolean</strong> 把类型转换为布尔型（如果可以转换的话）</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"><strong>ToByte</strong> 把类型转换为字节类型。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;"><strong>ToChar</strong> 把类型转换为单个 Unicode 字符类型（如果可以转换的话）</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;"><strong>ToDateTime</strong> 把类型（整数或字符串类型）转换为 日期-时间 结构。</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;"><strong>ToDecimal</strong> 把浮点型或整数类型转换为十进制类型。</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;"><strong>ToDouble</strong> 把类型转换为双精度浮点型。</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;"><strong>ToInt16</strong> 把类型转换为 16 位整数类型。</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;"><strong>ToInt32</strong> 把类型转换为 32 位整数类型。</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;"><strong>ToInt64</strong> 把类型转换为 64 位整数类型。</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;"><strong>ToSbyte</strong> 把类型转换为有符号字节类型。</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;"><strong>ToSingle</strong> 把类型转换为小浮点数类型。</td></tr><tr><td style="text-align:left;">12</td><td style="text-align:left;"><strong>ToString</strong> 把类型转换为字符串类型。</td></tr><tr><td style="text-align:left;">13</td><td style="text-align:left;"><strong>ToType</strong> 把类型转换为指定类型。</td></tr><tr><td style="text-align:left;">14</td><td style="text-align:left;"><strong>ToUInt16</strong> 把类型转换为 16 位无符号整数类型。</td></tr><tr><td style="text-align:left;">15</td><td style="text-align:left;"><strong>ToUInt32</strong> 把类型转换为 32 位无符号整数类型。</td></tr><tr><td style="text-align:left;">16</td><td style="text-align:left;"><strong>ToUInt64</strong> 把类型转换为 64 位无符号整数类型。</td></tr></tbody></table><p>类型之间的转换方法 - Convert 和 Parse</p><div class="language-C# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">locstr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">ToString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//如果要将&quot;locstr&quot;转成整型数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//方法一: 用 Convert </span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Convert.</span><span style="color:#B392F0;">ToInt16</span><span style="color:#E1E4E8;">(locstr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//方法二: 用 Parse</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ii</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Parse</span><span style="color:#E1E4E8;">(locstr);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">locstr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">ToString</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//如果要将&quot;locstr&quot;转成整型数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//方法一: 用 Convert </span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Convert.</span><span style="color:#6F42C1;">ToInt16</span><span style="color:#24292E;">(locstr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//方法二: 用 Parse</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ii</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Parse</span><span style="color:#24292E;">(locstr);</span></span></code></pre></div><h3 id="c-中的变量" tabindex="-1">C#中的变量 <a class="header-anchor" href="#c-中的变量" aria-label="Permalink to &quot;C#中的变量&quot;">​</a></h3><p>在C#中，每个变量都有一个特定的类型，类型决定了变量的内存大小和布局，范围内的值可以存储在内存中，C#中提供的基本值类型可以大致分类一下几类：</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">举例</th></tr></thead><tbody><tr><td style="text-align:left;">整数类型</td><td style="text-align:left;">sbyte、byte、short、ushort、int、uint、long、ulong 和 char</td></tr><tr><td style="text-align:left;">浮点型</td><td style="text-align:left;">float 和 double</td></tr><tr><td style="text-align:left;">十进制类型</td><td style="text-align:left;">decimal</td></tr><tr><td style="text-align:left;">布尔类型</td><td style="text-align:left;">true 或 false 值，指定的值</td></tr><tr><td style="text-align:left;">空类型</td><td style="text-align:left;">可为空值的数据类型</td></tr></tbody></table><h4 id="c-变量的定义" tabindex="-1">C#变量的定义 <a class="header-anchor" href="#c-变量的定义" aria-label="Permalink to &quot;C#变量的定义&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">C#中变量定义的语法：</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;data_type&gt; &lt;variable_list&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">C#中变量定义的语法：</span></span>
<span class="line"><span style="color:#24292e;">&lt;data_type&gt; &lt;variable_list&gt;</span></span></code></pre></div><p><strong>data_type</strong>必须是一个有效的C#数据类型，可以是char、int float、double或自定义的数据类型，<strong>variable</strong>可以由一个或者多个用逗号分隔的标识符名称组成。</p><p>例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">init i,j,k;</span></span>
<span class="line"><span style="color:#e1e4e8;">char a, b, c;</span></span>
<span class="line"><span style="color:#e1e4e8;">float f;</span></span>
<span class="line"><span style="color:#e1e4e8;">double d;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">init i,j,k;</span></span>
<span class="line"><span style="color:#24292e;">char a, b, c;</span></span>
<span class="line"><span style="color:#24292e;">float f;</span></span>
<span class="line"><span style="color:#24292e;">double d;</span></span></code></pre></div>`,122),p=[e];function o(c,r,i,d,y,E){return a(),n("div",null,p)}const u=s(t,[["render",o]]);export{h as __pageData,u as default};
